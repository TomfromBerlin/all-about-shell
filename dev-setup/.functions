#!/local/bin/zsh

# mkdir + cd
function mkd() {
  if [ $# -eq 1 ]; then
    mkdir -p "$1" && cd "$1";
  else
    echo "Error - no directory passed!";
  fi
}

# Calculate percentage
function percent() {
  if [ $# -ne 2 ]; then
    echo "Error - 2 arguments are mandatory!"
  fi

  echo "scale=2; $2*$1/100" | bc
}

# Add ssh keys on login
function sshadd() {
  ssh-add -l >/dev/null

  if [[ $? != 0  ]]; then
    ssh-add ~/.ssh/<key-1> ~/.ssh/<key-2> ~/.ssh/<key-3> 2>/dev/null
  fi
}

# Find top n biggest files (default is 5)
function big() {
  num=5;
  if [ $# -gt 0 ]; then
    num=$1
  fi;
  find . -type f -exec ls -s {} \; | sort -n -r | head -$num | awk '{printf("%.2fM %s\n", $1*512/1024/1024, $2)}'
}

# Timer
function timer() {
  count=10;
  if [ $# -gt 0 ]; then
    count=$1
  fi
  echo "Timer of $count seconds started";
  for ((i=count; i>0; i--)); do sleep 1; printf "Time remaining : $i seconds \r"; done
  echo "\nTime Up!"
  echo -e "\a"
}

# Most used commands
function topcmd() {
  history | awk '{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] " " CMD[a]/count*100 "% " a;}' | grep -v "./" | column -c3 -s " " -t | sort -nr | nl |  head -n10
}

# Go up by n directories
function up() {
  level=$1
  if [ $# -gt 0 ]; then
    while [ "$level" -gt "0" ]; do
      cd ..
      level=$(($level - 1))
    done
  else
    cd ..
  fi
}

# cheat.sh shortcut
function cheatsheet() { curl http://cht.sh/$1 }

# docker-compose up
function dcu() {
  if [ $# -gt 0 ]; then
    docker-compose -f $1 up -d
  else
    docker-compose up -d
  fi
}

# docker-compose down
function dcd() {
  if [ $# -gt 0 ]; then
    docker-compose -f $1 down
  else
    docker-compose down
  fi
}

# calculate monthly in-hand salary
function inhand() {
  if [ $1 -gt 0 ]; then
    echo $((($1 * 0.75) / 12))
  fi
}

# find top 5 files with maximum number of lines
function find_top_files() {
  local file_pattern="${1:-*.java}"
  find . -name "$file_pattern" -type f -exec wc -l {} + | sort -rn | head -n 6 | tail +2
}

# kubectl
# get pods by app name
kgpol() { k get pods -l=app="$1"; }

# get deployments by app name
kgdepl() { k get deployments -l=app="$1"; }

# get services by app name
kgsvcl() { k get svc -l=app="$1"; }

# delete pod
krmpo() { k delete pod "$1" --wait=false; }

# grep a string in a cm
kgrepcm() { k describe cm "$1" | grep "$2"; }

# get logs for a pod
kl() { k logs "$1" | less; }

# get logs from previous container run
klp() { k logs -p "$1" | less; }

# follow logs
klf() { k logs "$1" --follow; }

# tail logs
klt() { k logs "$1" --tail "$2"; }

# follow and tail logs
klft() { k logs "$1" --follow --tail "$2"; }

# get pod details in yaml format
kgpoy() { k get pod "$1" -o yaml | less; }

# get deployment details in yaml format
kgdepy() { k get deployment "$1" -o yaml | less; }

# get svc details in yaml format
kgsvcy() { k get service "$1" -o yaml | less; }

# get pod details in json format
kgpoj() { k get pod "$1" -o json | less; }

# get deployment details in json format
kgdepj() { k get deployment "$1" -o json | less; }

# get svc details in json format
kgsvcj() { k get service "$1" -o json | less; }

# scale deployment
kscale() { k scale deployment "$1" --replicas="$2"; }

# enter into pod's bash shell
kbash() { kubectl -it exec "$1" bash; }

coinflip() {
    if [ $((RANDOM % 2)) -eq 0 ]; then
        echo "Heads"
    else
        echo "Tails"
    fi
}

# Function to convert from feet to inches
f2i() {
    if [ $# -lt 1 ]; then
        echo "Error: Missing parameters. Usage: f2i <feet> [<inches>]"
        return 1
    fi

    feet=$1
    inches=${2:-0}  # If in not provided, default to 0

    total_inches=$((feet * 12 + inches))
    echo "$feet ft $inches in = $total_inches in"
}

# Function to convert from in to centimeters
i2c() {
    if [ $# -lt 1 ]; then
        echo "Error: Missing parameter. Usage: i2c <inches>"
        return 1
    fi

    inches=$1
    centimeters=$(bc <<< "scale=2; $inches * 2.54")
    echo "$inches in = $centimeters cm"
}

# Function to convert from centimeters to inches
c2i() {
    if [ $# -lt 1 ]; then
        echo "Error: Missing parameter. Usage: c2i <centimeters>"
        return 1
    fi

    centimeters=$1
    inches=$(bc <<< "scale=2; $centimeters / 2.54")
    echo "$centimeters cm = $inches in"
}

# Function to convert from inches to feet
i2f() {
    if [ $# -lt 1 ]; then
        echo "Error: Missing parameter. Usage: i2f <inches>"
        return 1
    fi

    inches=$1
    feet=$((inches / 12))
    remaining_inches=$((inches % 12))
    echo "$inches in = $feet ft $remaining_inches in"
}

# Function to convert from feet to centimeters
f2c() {
    if [ $# -lt 1 ]; then
        echo "Error: Missing parameters. Usage: f2c <feet> [<inches>]"
        return 1
    fi

    feet=$1
    inches=${2:-0}  # If in not provided, default to 0

    total_inches=$((feet * 12 + inches))
    centimeters=$(bc <<< "scale=2; $total_inches * 2.54")
    echo "$feet ft $inches in = $centimeters cm"
}

# Function to convert from centimeters to feet and inches
c2f() {
    if [ $# -lt 1 ]; then
        echo "Error: Missing parameter. Usage: c2f <centimeters>"
        return 1
    fi

    centimeters=$1
    total_inches=$(bc <<< "scale=2; $centimeters / 2.54")

    feet=$((total_inches / 12))
    remaining_inches=$((total_inches % 12))

    echo "$centimeters cms = $feet ft and $remaining_inches in"
}
