https://www.shellcheck.net/

finds bugs in your shell scripts


-----------------------------------
 exit status of a command using $?
-----------------------------------

$ ls -l | awk '/^-/' | grep "\.txt"
-rw-r--r-- 1 ABHNATH 1049089 1122 Oct 30 20:25 notes.txt
-rw-r--r-- 1 ABHNATH 1049089  414 Oct 30 19:48 one_liner_scripts.txt

$ echo $?
0

$ ls -l | awk '/^-/' | grep "\.txtt"

$ echo $?
1


---------
 echo -e
---------

The -e option is used for telling echo that the string passed to it contains special characters and requires extended functionality.

$ echo "hello\tworld"
hello\tworld

$ echo -e "hello\tworld"
hello   world

$ echo -e "hello\nworld"
hello
world


--------------------
 tracing the script
--------------------
To turn on echo/trace for an entire script, the -x option can be added in the shebang line

#!/bin/bash -x

or

bash -x some-script

Example :

$ bash -x tolower.sh "Hello World"
+ '[' 1 -ne 1 ']'
+ echo 'Hello World'
+ tr '[:upper:]' '[:lower:]'
hello world


The set -x turns on echo/trace.
The { set +x; } 2> /dev/null turns off echo/trace and absorbs the output into the special /dev/null output device.

--------------
 factorial.sh
--------------
#!/bin/bash
echo -n "Enter the number : "
read -r num
fact=1
while [ "$num" -ne 0 ]; do
        set -x
        fact=$((fact * num))
        { set +x; } 2> /dev/null
        num=$((num - 1))
done
echo "factorial = $fact"


$ ./factorial.sh
Enter the number : 5
+ fact=5
+ fact=20
+ fact=60
+ fact=120
+ fact=120
factorial = 120

